#!/usr/bin/env node

/*Dt162g, Moment5, projekt, Nils
nibo1005@student.miun.se
*/

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dt162gmom5:server');
var http = require('http');

/**
 * Hämtar port från och lagrar i Express.
 */

/*
Fråna package.json:

"scripts": {
        "start": "node ./bin/www"
    },

*/

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Lyssnar på port.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalisera port till number, string,  false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}


/**
 * Event lyssnare för HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

   // Hanterar specific listen errors, friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener för HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
